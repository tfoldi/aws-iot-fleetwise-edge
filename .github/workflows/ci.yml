# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

name: CI

permissions:
  id-token: write
  contents: write

on:
  push:
    branches: ["*"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["*"]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  linting:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - run: sudo apt-get install expect
      - run: pip install pre-commit
      - run: unbuffer pre-commit run --all-files

  build-amd64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/template/fwe-build"
        with:
          build-arch: "native"
          upload-arch: "amd64"
          dist-name: "aws-iot-fleetwise-edge"
          cache-paths: /usr/local/x86_64-linux-gnu
          dist-files: build/aws-iot-fleetwise-edge:.

  build-arm64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/template/fwe-build"
        with:
          build-arch: "cross-arm64"
          upload-arch: "arm64"
          dist-name: "aws-iot-fleetwise-edge"
          cache-paths: /usr/local/aarch64-linux-gnu:/usr/local/x86_64-linux-gnu
          dist-files: build/aws-iot-fleetwise-edge:.

  build-armhf:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/template/fwe-build"
        with:
          build-arch: "cross-armhf"
          upload-arch: "armhf"
          extra-options: "--with-iwave-gps-support"
          dist-name: "aws-iot-fleetwise-edge"
          cache-paths: /usr/local/arm-linux-gnueabihf:/usr/local/x86_64-linux-gnu
          dist-files: build/aws-iot-fleetwise-edge:.

  build-ros2-amd64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/template/fwe-build"
        with:
          build-arch: "native"
          upload-arch: "amd64"
          extra-options: "--with-ros2-support"
          dist-name: "aws-iot-fleetwise-edge-ros2"
          cache-paths: /usr/local/x86_64-linux-gnu:/opt/ros
          dist-files: build/iotfleetwise/aws-iot-fleetwise-edge:.

  build-ros2-arm64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: "./.github/template/fwe-build"
        with:
          build-arch: "cross-arm64"
          upload-arch: "arm64"
          extra-options: "--with-ros2-support"
          dist-name: "aws-iot-fleetwise-edge-ros2"
          cache-paths: /usr/local/aarch64-linux-gnu:/usr/local/x86_64-linux-gnu:/opt/ros
          dist-files: build/iotfleetwise/aws-iot-fleetwise-edge:.


  build-docker:
    runs-on: ubuntu-22.04
    needs:
      - build-amd64
      - build-arm64
      - build-armhf
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - name: Move artifacts to match buildx TARGETPLATFORM structure
        run: |
          mkdir -p linux/amd64
          mv aws-iot-fleetwise-edge-amd64/aws-iot-fleetwise-edge-amd64.tar.gz linux/amd64/aws-iot-fleetwise-edge.tar.gz
          tar -zcf linux/amd64/opt.tar.gz -T /dev/null # Create empty tar.gz
          mkdir -p linux/arm64
          mv aws-iot-fleetwise-edge-arm64/aws-iot-fleetwise-edge-arm64.tar.gz linux/arm64/aws-iot-fleetwise-edge.tar.gz
          tar -zcf linux/arm64/opt.tar.gz -T /dev/null # Create empty tar.gz
          mkdir -p linux/arm/v7
          mv aws-iot-fleetwise-edge-armhf/aws-iot-fleetwise-edge-armhf.tar.gz linux/arm/v7/aws-iot-fleetwise-edge.tar.gz
          tar -zcf linux/arm/v7/opt.tar.gz -T /dev/null # Create empty tar.gz          
      - uses: "./.github/template/docker-build"
        with:
          dist-name: aws-iot-fleetwise-edge
          push-role: ${{ secrets.PUBLIC_ECR_PUSH_ROLE }}

  build-docker-ros2:
    runs-on: ubuntu-22.04
    needs:
      - build-ros2-amd64
      - build-ros2-arm64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - name: Move artifacts to match buildx TARGETPLATFORM structure
        run: |
          mkdir -p linux/amd64
          mv aws-iot-fleetwise-edge-ros2-amd64/aws-iot-fleetwise-edge-ros2-amd64.tar.gz linux/amd64/aws-iot-fleetwise-edge.tar.gz
          mv aws-iot-fleetwise-edge-ros2-amd64/opt.tar.gz                               linux/amd64/opt.tar.gz
          mkdir -p linux/arm64
          mv aws-iot-fleetwise-edge-ros2-arm64/aws-iot-fleetwise-edge-ros2-arm64.tar.gz linux/arm64/aws-iot-fleetwise-edge.tar.gz
          mv aws-iot-fleetwise-edge-ros2-arm64/opt.tar.gz                               linux/arm64/opt.tar.gz
      - uses: "./.github/template/docker-build"
        with:
          dist-name: aws-iot-fleetwise-edge-ros2
          push-role: ${{ secrets.PUBLIC_ECR_PUSH_ROLE }}
